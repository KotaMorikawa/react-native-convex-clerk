---
description: 
globs: 
alwaysApply: true
---
# コーディング規約 (Cursor Rules)

あなたはTypeScript、React Native、Expo、そしてモバイルUI開発のエキスパートです。

## コーディングスタイルと構造
* 簡潔で技術的に正確なTypeScriptコードを記述し、適切な例を提示してください。
* クラスを避け、関数型および宣言的なプログラミングパターンを使用してください。
* コードの重複を避け、イテレーションとモジュール化を優先してください。
* `isLoading`や`hasError`のように、助動詞を用いた説明的な変数名を使用してください。
* ファイルは、エクスポートされるコンポーネント、サブコンポーネント、ヘルパー関数、静的コンテンツ、型の順で構成してください。
* プロジェクトのセットアップと設定は、Expoの公式ドキュメントに従ってください: https://docs.expo.dev/

## 命名規則
* ディレクトリ名は、ケバブケース（例: `components/auth-wizard`）を使用してください。
* コンポーネントのエクスポートには、名前付きエクスポート（named export）を推奨します。

## TypeScriptの利用
* すべてのコードにTypeScriptを使用し、`type`よりも`interface`を優先してください。
* `enum`を避け、代わりに`Map`オブジェクトを使用してください。
* 関数コンポーネントには、TypeScriptのインターフェースを適用してください。
* より厳格な型安全性を確保するため、TypeScriptの`strict`モードを有効にしてください。

## シンタックスとフォーマット
* 純粋関数には`function`キーワードを使用してください。
* 条件分岐で不要な波括弧（`{}`）を避け、単純な文には簡潔なシンタックスを使用してください。
* 宣言的なJSXを記述してください。
* コードフォーマットの一貫性を保つために、Prettierを使用してください。

## UIとスタイリング
* 一般的なUIパターンやレイアウトには、Expoの組み込みコンポーネントを使用してください。
* FlexboxとExpoの`useWindowDimensions`フックを用いて、レスポンシブデザインを実装してください。
* コンポーネントのスタイリングには、styled-componentsまたはTailwind CSSを使用してください。
* Expoの`useColorScheme`フックを用いて、ダークモードを実装してください。
* ARIAロールやネイティブのアクセシビリティプロパティを使用し、高いアクセシビリティ（a11y）基準を確保してください。
* パフォーマンスの高いアニメーションやジェスチャーを実現するために、`react-native-reanimated`と`react-native-gesture-handler`を活用してください。

## セーフエリア管理
* アプリ全体でセーフエリアを管理するために、`react-native-safe-area-context`の`SafeAreaProvider`を使用してください。
* トップレベルのコンポーネントを`SafeAreaView`でラップし、iOSとAndroidの両方でノッチやステータスバーなどの画面インセットに対応してください。
* スクロール可能なコンテンツには`SafeAreaScrollView`を使用し、セーフエリアの境界線を尊重するようにしてください。
* セーフエリアのための`padding`や`margin`のハードコーディングを避け、`SafeAreaView`とコンテキストフックに依存してください。

## バックエンド (Convex)
* **ディレクトリ構造:** すべてのConvex関連コードは、プロジェクトルートの`convex/`ディレクトリに配置してください。
* **命名規則:** ファイル名は扱うデータモデルの複数形（例: `links.ts`）とし、関数名は操作が明確な動詞から（例: `createLink`）始めてください。
* **スキーマ定義:** `convex/schema.ts`でスキーマを一元管理し、`defineSchema`と`defineTable`を使用してください。検索効率向上のため`.index()`や`.uniqueIndex()`を明示的に定義してください。
* **データアクセス:** フロントエンドからのデータ操作は、Convexが自動生成するフック（`useQuery`, `useMutation`, `useAction`）の使用を原則とします。

## 認証 (Clerk)
* **プロバイダ設定:** アプリのルートコンポーネントを`ConvexProviderWithClerk`でラップし、`useAuth`フックを介してClerkの認証状態をConvexに連携させてください。
* **UI制御:** 認証状態に基づくUIの表示切り替えには、`<SignedIn>`と`<SignedOut>`コンポーネントを積極的に使用し、宣言的に記述してください。
* **認証情報:** ユーザー情報は`useUser`フック、セッショントークンは`useAuth`フックを使用して取得してください。

## 状態管理
* **基本方針:**
    * サーバーの状態管理とキャッシュは**React Query (TanStack Query)**に一任し、過剰なAPI呼び出しを避けてください。
    * 認証状態は**Clerk**が提供するフック（`useUser`, `useAuth`）を介して取得してください。
    * 上記以外のグローバルなクライアント状態管理は、原則として**React Contextと`useReducer`フック**を使用してください。
* **パフォーマンスへの配慮:**
    * `useContext`を使用する際は、`React.memo`や`useMemo`を活用し、不要な再レンダリングを抑制することを強く推奨します。
    * 関心の異なる状態は、それぞれ別のContextに分割して管理してください。
* **例外的な許容:**
    * 更新頻度が非常に高いUI状態など、Contextによるパフォーマンスへの影響が懸念されるケースに限り、**Zustand**のような軽量ライブラリの導入を許容します。

## パフォーマンス最適化
* アプリの起動体験を最適化するために、Expoの`AppLoading`と`SplashScreen`を使用してください。
* 画像を最適化してください：サポートされている場合はWebP形式を使用し、サイズデータを含め、`expo-image`で遅延読み込みを実装してください。
* Reactの`Suspense`と動的インポートを用いて、重要でないコンポーネントのコード分割と遅延読み込みを実装してください。
* React Nativeの組み込みツールやExpoのデバッグ機能を使い、パフォーマンスのプロファイリングと監視を行ってください。
* コンポーネントをメモ化し、`useMemo`と`useCallback`フックを適切に使用することで、不要な再レンダリングを避けてください。

## ナビゲーション
* ルーティングとナビゲーションには`react-navigation`を使用し、スタック、タブ、ドロワーナビゲーターのベストプラクティスに従ってください。
* より良いユーザーエンゲージメントとナビゲーションフローのために、ディープリンクとユニバーサルリンクを活用してください。
* ナビゲーションのハンドリングを改善するために、`expo-router`による動的ルートを使用してください。

## エラーハンドリングとバリデーション
* 実行時のバリデーションとエラーハンドリングには、Zodを使用してください。
* Sentryなどのサービスを用いて、適切なエラーロギングを実装してください。
* エラーハンドリングとエッジケースを優先してください：関数の冒頭でエラーを処理してください。
* 深くネストした`if`文を避けるため、エラー条件には早期リターン（early return）を使用してください。
* 不要な`else`文を避け、if-returnパターンを使用してください。
* 予期しないエラーをキャッチして処理するために、グローバルなエラー境界（Error Boundary）を実装してください。
* 本番環境でのエラーのロギングと報告には、`expo-error-reporter`を使用してください。

## テスト
* JestとReact Native Testing Libraryを用いて、単体テストを記述してください。
* Detoxを用いて、重要なユーザーフローの結合テストを実装してください。
* 異なる環境でテストを実行するために、Expoのテストツールを使用してください。
* UIの一貫性を確保するために、コンポーネントのスナップショットテストを検討してください。

## セキュリティ
* XSS攻撃を防ぐため、ユーザー入力をサニタイズしてください。
* 機密データの安全な保管には、`react-native-encrypted-storage`を使用してください。
* HTTPSと適切な認証を用いて、APIとの安全な通信を確保してください。
* Convexのクエリ/ミューテーションでは、`ctx.auth`を用いてサーバーサイドで認証チェックを必ず行ってください。
* アプリを保護するために、Expoのセキュリティガイドラインに従ってください: https://docs.expo.dev/guides/security/

## ネイティブ拡張とオフライン対応
* **Share Extension:** `react-native-share-extension`で受け取ったデータは、バリデーション後、速やかにConvexのmutationに送信してください。
* **ネイティブモジュール:** Expoでカバーできないネイティブ機能（例: iOS App Intents）は、`expo-modules-core`を使用して実装してください。
* **オフラインサポート:** ConvexのOptimistic Updatesやキャッシュ機能を活用し、オフライン体験を実装してください。

## 国際化（i18n）
* 国際化とローカライゼーションには、`react-native-i18n`または`expo-localization`を使用してください。
* 多言語とRTL（Right-to-Left）レイアウトをサポートしてください。
* アクセシビリティのために、テキストのスケーリングとフォント調整を確実に行ってください。

## 主要な規約
* 開発とデプロイを効率化するため、Expoのマネージドワークフローに依拠してください。
* モバイルウェブバイタル（読み込み時間、ジャンク、レスポンシブ性）を優先してください。
* 環境変数と設定の管理には、`expo-constants`を使用してください。
* デバイスの権限を適切に処理するために、`expo-permissions`を使用してください。
* OTA（Over-the-Air）アップデートのために、`expo-updates`を実装してください。
* アプリのデプロイと公開に関するExpoのベストプラクティスに従ってください: https://docs.expo.dev/distribution/introduction/
* 両方のプラットフォームで広範囲にテストを行い、iOSとAndroidの互換性を確保してください。

## APIドキュメント
* プロジェクトのセットアップと設定は、Expoの公式ドキュメントを参照してください: https://docs.expo.dev/
* ベストプラクティスに関する詳細情報（Views、Blueprints、Extensions）については、Expoのドキュメントを参照してください。